# 读取下载下来的 txt 文件，data 变量中存储的是只含有 0 和 1 和 \n 的 字符串
# （又可以叫做二进制串，当没有 \n 换行符时），现在需要对 data 中的 0 和 1 分别替换，模拟
# 绘制二维码的过程：

with open(r"C:\Users\AshGrey\Downloads\01.txt") as file :
    # 暂时不用管 with as 这个语句是干什么的，因为讲起来需要其他知识的基础
    data = file.read()
    # 原始的只含有 0 和 1 和 \n 的字符串
    # 格式就像是 "010110101\n101010011\n ... " 这只是举例，我没看附件 txt 到底是什么样的

qrcode_data = "" # 绘制得到的二维码图像数据，如果带上换行符 \n 就可以使得在终端中输出完美的平面二维码
row = column = 1 # 在循环过程中表示现在读取到的字符串的坐标。在计算机中，坐标和数学的坐标是不一样的：
# 举例：
# ┌──────┐──────┐──────┐
# │(1, 1)│(2, 1)│(3, 1)│
# ├──────┘──────┘──────┘ ...
# │(1, 2)│(2, 2)│(3, 2)│
# └──────┘──────┘──────┘
#           .
#           .
#           .
# 计算机中的坐标，横坐标 x 表示从左往右第几列（我的代码里用 colmun 表示）
#              纵坐标 y 表示从上往下第几行（我的代码里用 row    表示）

length = data.find("\n")
# Python 的字符串有一个函数（或者说方法）find()，括号内的参数是需要查找的字符，函数的返回值是
# 这个字符在字符串中第一次出现的位置（位置，应该是计算机中的术语：索引，index）。索引意味着，根据这个索引的值，
# 从数据的起始位置开始往结束位置数「这个索引的值」次就可以得到索引所指向的数据对于我们读取的 data：
#
# index : 0  1  2  3  4  5  6  7  8  9      注意，计算机的索引从 0 开始，意味着这个数的过程不用数自己
# data  : 0  1  0  1  1  0  1  0  1  \n  1  0  1  0  1  0  0  1  1  \n
#                                           注意，转义符（就是转换意思，因为 \n 是代表换行的概念，不好
#                                           和任何符号等价起来，所以需要转换，使用一个反斜杠 \ 加上一个
#                                           英文字母就可以做到这一点，\n（换行符） 区别于 n（字母）
#
# 所以在这里，length 变量代表着 \n 第一次出现位置的索引，也都代表着这个编码数据绘制出来的二维码的边长

# 以下是需要绘制定位符的黑色部分的坐标
# 当坐标 (column, row) = 这个列表（list）中的某个坐标 时，就要绘制方块（这里我们使用元组 tuple 表示坐标）
locate_list = [(1, 1), (2, 1), (3,1), (4, 1), (5, 1), (6, 1), (7, 1),
               (length - 6, 1), (length - 5, 1), (length - 4, 1),
               (length - 3, 1), (length - 2, 1), (length - 1, 1), (length, 1),
               (1, 2), (7, 2), (length - 6, 2), (length, 2),
               (1, 3), (3, 3), (4, 3), (5, 3), (7, 3),
               (length - 6, 3), (length - 4, 3), (length - 3, 3), (length - 2, 3), (length, 3),
               (1, 4), (3, 4), (4, 4), (5, 4), (7, 4),
               (length - 6, 4), (length - 4, 4), (length - 3, 4), (length - 2, 4), (length, 4),
               (1, 5), (3, 5), (4, 5), (5, 5), (7, 5),
               (length - 6, 5), (length - 4, 5), (length - 3, 5), (length - 2, 5), (length, 5),
               (1, 6), (7, 6), (length - 6, 6), (length, 6),
               (1, 7), (2, 7), (3,7), (4, 7), (5, 7), (6, 7), (7, 7),
               (length - 6, 7), (length - 5, 7), (length - 4, 7),
               (length - 3, 7), (length - 2, 7), (length - 1, 7), (length, 7),
               (1, length - 6), (2, length - 6), (3, length - 6), (4, length - 6), (5, length - 6),
               (6, length - 6), (7, length - 6),
               (1, length - 5), (7, length - 5),
               (1, length - 4), (3, length - 4), (4, length - 4), (5, length - 4), (7, length - 4),
               (1, length - 3), (3, length - 3), (4, length - 3), (5, length - 3), (7, length - 3),
               (1, length - 2), (3, length - 2), (4, length - 2), (5, length - 2), (7, length - 2),
               (1, length - 1), (7, length - 1),
               (1, length), (2, length), (3, length), (4, length), (5, length),
               (6, length), (7, length)]




for c in data :
    # 使用 for 循环获取 data 中的每个字符，c 就是在遍历（指从头到尾依次扫描）字符串 data
    # 关于 for 循环还有更加复杂的概念，iterator 和 iterable 的区别，但是这里不用管
    # 只需要知道，使用 for c in data :，c 就遍历取了这个 data 字符串中的每一个元素
    # 举例：
    # 对于字符串 "010110101\n101010011\n ... "
    # 第 1 次循环                   c = "0"
    # 第 2 次循环                   c = "1"
    # 第 3 次循环                   c = "0"
    #     ...
    # 第 length + 1 次循环          c = "\n"   这里 length = 9
    # 第 length + 2 次循环          c = "1"
    #     ...
    # 第 2 * (length + 1) 次循环    c = "\n"
    if c == "1" or ((column, row) in locate_list) :
        # elif 就是 else if 的意思，当上面的所有表示判断的语句都是假的（False）时，这里的 elif 才会
        # 执行，对于这个 elif，就是条件 c == "0" 不成立时才进行判断，如果成立，之后的 elif 或者 else
        # 语句都不会执行
        # 举例：
        # if (s1) :   s1 = True  时执行，后面的 elif 和 else 中的语句都不执行
        #             s1 = False 时不执行，后面的 elif 和 else 中的语句才有可能执行
        # elif (s2) : s1 = False 并且（Python 中使用 and 表示 并且，用 or 表示或） s2 = True
        #             时执行，后面的 elif 和 else 中的语句都不执行
        #             s1 = False 并且 s2 = False 时不执行，后面的语句才有可能执行
        # elif (s3) :
        # elif (s4) :
        #  ...
        # else :      当上面所有的条件都不成立的时候，才会执行 else 中的语句
        qrcode_data += "█"
        column += 1
        # 当此时读取到 "1" 或者此时的位置需要绘制定位框时，绘制的二维码数据应该在相同的位置绘制一个完整的方块符号 "█"，
        # 同理，表示下一次读取到的位置的横坐标 column 需要增加 1（向右扫描）
    elif c == "0" :   # == 表示「是否等于」，等于的时候返回 True，if 语句中的代码得到执行
        qrcode_data += " "  # += 表示「累加」，等价于 qrcode_data = qrcode_data + " "
                            # 计算机中的 = 和数学不一样，不是表示判断，而是表示赋值，右边的值
                            # 赋值给左边的值，所以右边的 qrcode_data 表示没有赋值前的数据，
                            # 左边的 qrcode_data 表示接受了赋值的数据，所以 += 就是累加运算
        column += 1
        # 当此时读取到 "0" 时，绘制的二维码数据应该在相同的位置绘制一个空格 " "，并且表示下一次读取的位置的
        # 横坐标 column 需要增加 1（向右扫描）
    
    elif c == "\n" :
        qrcode_data += "\n"
        row += 1
        column = 1
        # 当此时读取到 "\n" 换行符时，二维码数据也应当换行了，所以在相同的位置加上一个 "\n" 表示换行
        # 此时表示下一次读取到的位置的横坐标需要重新回到 1，纵坐标需要增加 1

print(qrcode_data)

# 将二维码打印到终端
# ███████  ███  █   ███████
# █     █    ████ █ █     █
# █ ███ █  ███   █  █ ███ █
# █ ███ █ █ ████    █ ███ █
# █ ███ █ █ █ █ █   █ ███ █
# █     █  ██   █ █ █     █
# ███████ █ █ █ █ █ ███████
#          █     ██
# ██   ███ ███ ██ █   ██
#    █    █ ██  █  █  █ █
#  █  ████ █    ███ ███  ██
#   ████ █  █ █ ██  █  █  █
# █     █  ██    █  ██ █
# ████   ██████ ███  █ █
# █ ██ █████  ██ ██████ ███
# █   ██ ██  █  █ █ ██ ██
# █   ████  ███████████ ███
#         █ ██   ██   █ █
# ███████ █  █ █  █ █ █   █
# █     █ █ █ █ █ █   ██  █
# █ ███ █   █  ████████  █
# █ ███ █    ██  █ ████ ███
# █ ███ █  █  ██  █  █    █
# █     █ ██    ██ ██ ██  █
# ███████ ██ █    █ ███ █ █